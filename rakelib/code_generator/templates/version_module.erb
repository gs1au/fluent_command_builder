# Generated code. Do not modify.

require File.expand_path(File.dirname(__FILE__) + '/../command_base')
require File.expand_path(File.dirname(__FILE__) + '/../printer')
require File.expand_path(File.dirname(__FILE__) + '/../underlying_builder')

module FluentCommandBuilder
  def <%= model[:version_factory_method_signature] %>
    <%= model[:create_method_call] %> { |b| yield b if block_given? }
  end
  module <%= model[:command_module_name] %>
    module <%= model[:version_module_name] %>
      VERSION = '<%= model[:version] %>'
      def self.default_path
        @default_path ||= nil
      end
      def self.default_path=(value)
        printer = FluentCommandBuilder::Printer.new
        begin
          printer.print_warning %Q[Default Path for command "#{FluentCommandBuilder::<%= model[:command_module_name] %>::COMMAND_NAME} #{VERSION}" does not exist. Path: #{value}] unless File.exist? value
        rescue
          printer.print_warning %Q[Failed to determine whether Default Path for command "#{FluentCommandBuilder::<%= model[:command_module_name] %>::COMMAND_NAME} #{VERSION}" exists. An internal error occurred.]
        end
        @default_path = value
      end
      def <%= model[:create_method_signature] %>
        b = UnderlyingBuilder.new FluentCommandBuilder::<%= model[:command_module_name] %>::COMMAND_NAME
        b.path = self.default_path
        c = <%= model[:command_initializer_call] %>
        yield b if block_given?
        c
      end
      def <%= model[:command_factory_method_signature] %>
        <%= model[:create_method_call] %> { |b| yield b if block_given? }
      end
<%= model[:command_class] %>
    end
  end
end